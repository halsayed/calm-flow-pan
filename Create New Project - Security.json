{"status":{},"contains_secrets":false,"product_version":"3.6.0","spec":{"description":"Runbook to onboard a new tenant project on Calm","resources":{"endpoints_information":[],"endpoint_definition_list":[],"client_attrs":{},"credential_definition_list":[{"username":"admin","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"panorama_cred","cred_class":"static"}],"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"01_check_project_code"},{"kind":"app_task","name":"02_create_tenant_project"},{"kind":"app_task","name":"03_clone_template_account"},{"kind":"app_task","name":"04_clone_template_environment"},{"kind":"app_task","name":"05_clone_template_quotas"},{"kind":"app_task","name":"06_publish_marketplace_items"},{"kind":"app_task","name":"07_create_ad_objects"},{"kind":"app_task","name":"08_create_project_role"},{"kind":"app_task","name":"09_create_flow_policy"},{"kind":"app_task","name":"10_push_policy_to_panorama"}],"name":"aba4a069_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"01_check_project_code"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"02_create_tenant_project"}},{"from_task_reference":{"kind":"app_task","name":"02_create_tenant_project"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"03_clone_template_account"}},{"from_task_reference":{"kind":"app_task","name":"03_clone_template_account"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"04_clone_template_environment"}},{"from_task_reference":{"kind":"app_task","name":"04_clone_template_environment"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"05_clone_template_quotas"}},{"from_task_reference":{"kind":"app_task","name":"05_clone_template_quotas"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"06_publish_marketplace_items"}},{"from_task_reference":{"kind":"app_task","name":"06_publish_marketplace_items"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"07_create_ad_objects"}},{"from_task_reference":{"kind":"app_task","name":"07_create_ad_objects"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"08_create_project_role"}},{"from_task_reference":{"kind":"app_task","name":"08_create_project_role"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"09_create_flow_policy"}},{"from_task_reference":{"kind":"app_task","name":"09_create_flow_policy"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"10_push_policy_to_panorama"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"01_check_project_code","attrs":{"exit_status":[],"script":"# Name: Check if project code exists and create it if not\n# Task Type: set variable\n# Script Type: EScript\n# Author: Husain Ebrahim <husain.ebrahim@nutanix.com>\n# Date: 10-05-2023\n# Description:\n# region general settings\n# -----------------------------------------------\n\n# endregion\n\n# region test-environment\n# -----------------------------------------------\n# from decouple import config\n# import requests\n# import urllib3\n# import json\n# import base64\n# from time import sleep\n# import uuid\n# \n# urllib3.disable_warnings()\n# \n# # prism central config\n# pc_host = config('PC_HOST')\n# pc_port = config('PC_PORT', '9440')\n# pc_username = config('PC_USERNAME')\n# pc_password = config('PC_PASSWORD')\n# pc_authorization = 'Basic ' + base64.b64encode('{}:{}'.format(pc_username, pc_password).encode()).decode()\n# \n# # test settings\n# project_code = 'AAB'\n# project_category = 'PROJECTS'\n# endregion\n\n\n# region calm-environment\n# -----------------------------------------------\nimport requests\n\n# prism central config\npc_host = '127.0.0.1'\npc_port = '9440'\npc_authorization = 'Bearer @@{calm_jwt}@@'\n\n# blueprint settings\nproject_code = '@@{PROJECT_CODE}@@'\nproject_category = '@@{PROJECT_CATEGORY}@@'\n# endregion\n\n\n# region http headers\n# -----------------------------------------------\npc_url = 'https:\/\/{}:{}\/api\/nutanix\/v3\/{}'.format(pc_host, pc_port, '{}')\npc_kwargs = {\n    'verify': False,\n    'headers': {'Authorization': pc_authorization}\n}\n# endregion\n\n\n# region main function\n# -----------------------------------------------\n\n# check if the category exists and if the code is already in the category\npayload = {'kind': 'category'}\nr = requests.post(pc_url.format('categories\/'+project_category+'\/list'), json=payload, **pc_kwargs)\nif r .status_code == 200:\n    current_count = int(r.json()['metadata']['total_matches'])\n    print('INFO - current project code count: {}'.format(current_count))\n\nif current_count > 0:\n    codes = []\n    for entity in r.json()['entities']:\n        codes.append(entity['value'])\n    if project_code in codes:\n        print('ERROR - project code already exists')\n        exit(1)\n\n# if the category key doesn't exist then create it\nif current_count == 0:\n    payload = {'name': project_category}\n    print('INFO - category key is not available, creating it')\n    r = requests.put(pc_url.format('categories\/'+project_category), json=payload, **pc_kwargs)\n    print('INFO - creating category status code: {}'.format(r.status_code))\n\n# adding the new project code to the category\npayload = {'value': project_code}\nr = requests.put(pc_url.format('categories\/'+project_category+'\/'+project_code), json=payload, **pc_kwargs)\n\nprint('PROJECT_CODE={}'.format(project_code))\n# endregion","eval_variables":["PROJECT_CODE"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"02_create_tenant_project","attrs":{"exit_status":[],"script":"# Name: Create tenant project and return project uuid\n# Task Type: set variable\n# Script Type: EScript\n# Author: Husain Ebrahim <husain.ebrahim@nutanix.com>\n# Date: 25-09-2021\n# Description:\n\nimport requests\n\n# -------------- General settings ------------------\n\n\n\n# -------------- Test Environment ------------------\n\n# -------------- Calm Environment ------------------\nauthorization = 'Bearer @@{calm_jwt}@@'\nurl = 'https:\/\/127.0.0.1:9440\/api\/nutanix\/v3\/{}'\nproject_name = '@@{PROJECT_NAME}@@'\nproject_code = '@@{PROJECT_CODE}@@'\nproject_category = '@@{PROJECT_CATEGORY}@@'\n\nkwargs = {\n    'verify': False,\n    'headers': {'Authorization': authorization}\n}\n\npayload = {\n    'spec': {\n        'name': '{}-{}'.format(project_code, project_name),\n        'resources': {\n            'subnet_reference_list': [],\n            'external_user_group_reference_list': [],\n            'user_reference_list': []\n        },\n        'description': 'Project for tenant: {}, using code: {}'.format(project_name, project_code)\n    },\n    'api_version': '3.1.0',\n    'metadata': {\n        'kind': 'project',\n        'spec_version': 0,\n        'owner_reference': {\n            'kind': 'user',\n            'name': 'admin',\n            'uuid': '00000000-0000-0000-0000-000000000000'\n        },\n        'categories': {\n            project_category: project_code\n        }\n    }\n}\n\nr = requests.post(url.format('projects'), json=payload, **kwargs)\n\nif r.status_code == 202:\n    result = r.json()\n    task_uuid = result['status']['execution_context']['task_uuid']\n    task_state = result['status']['state']\n    project_uuid = result['metadata']['uuid']\n    print('INFO - Project created with status code: {}'.format(r.status_code))\n    print('INFO - Project uuid: {}'.format(project_uuid))\n    print('INFO - task: {}, state: {}'.format(task_uuid, task_state))\nelse:\n    print('ERRPR - project creation failed, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n# for for the project task to complete\nwhile task_state == 'PENDING':\n    print('INFO - waiting for 1 sec')\n    sleep(1)\n    r = requests.get(url.format('tasks\/'+task_uuid), **kwargs)\n    task_state = r.json()['status']\n    print('INFO - task: {}, state: {}'.format(task_uuid, task_state))\n\nprint('PROJECT_UUID={}'.format(project_uuid))","eval_variables":["PROJECT_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"03_clone_template_account","attrs":{"script":"# Name: Clone project account and subnets from a reference project template\n# Task Type: Excute\n# Script Type: EScript\n# Author: Husain Ebrahim <husain.ebrahim@nutanix.com>\n# Date: 01-11-2021\n# Description:\n\nimport requests\n\n# -------------- General settings ------------------\n\n\n\n# -------------- Test Environment ------------------\n\n# -------------- Calm Environment ------------------\nauthorization = 'Bearer @@{calm_jwt}@@'\nurl = 'https:\/\/127.0.0.1:9440\/api\/nutanix\/v3\/{}'\nproject_template = '@@{PROJECT_TEMPLATE}@@'\nproject_uuid = '@@{PROJECT_UUID}@@'\n\nkwargs = {\n    'verify': False,\n    'headers': {'Authorization': authorization}\n}\n\n\n# find the template project to clone the specs\n# ----------------------------------------------\npayload = {\n    'kind': 'project',\n    'filter': 'name=={}'.format(project_template)\n}\n\nr = requests.post(url.format('projects\/list'), json=payload, **kwargs)\nif r.status_code == 200 and int(r.json()['metadata']['total_matches']):\n    print('INFO - Template project found')\n    template = r.json()['entities'][0]\n    template_uuid = template['metadata']['uuid']\n    account_reference_list = template['spec']['resources']['account_reference_list']\n    default_subnet_reference = template['spec']['resources']['default_subnet_reference']\n    subnet_reference_list = template['spec']['resources']['subnet_reference_list']\n    environment_reference_list = template['spec']['resources']['environment_reference_list']\n    default_environment_uuid = template['spec']['resources']['default_environment_reference'].get('uuid')\n\n    print('INFO - template project uuid: {}'.format(template_uuid))\nelse:\n    print('ERROR - No template project found, stopping, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n# get target project details\n# -----------------------------------------\nprint('INFO - updating target project: {}'.format(project_uuid))\nr = requests.get(url.format('projects\/'+project_uuid), **kwargs)\nproject_spec = r.json()\ndel(project_spec['status'])\nproject_spec['spec']['resources']['account_reference_list'] = account_reference_list\nproject_spec['spec']['resources']['default_subnet_reference'] = default_subnet_reference\nproject_spec['spec']['resources']['subnet_reference_list'] = subnet_reference_list\n\nsleep(3)\nr = requests.put(url.format('projects\/'+project_uuid), json=project_spec, **kwargs)\n\n\n# check if the update worked\nif r.status_code == 202:\n    result = r.json()\n    task_uuid = result['status']['execution_context']['task_uuid']\n    task_state = result['status']['state']\n    project_uuid = result['metadata']['uuid']\n    print('INFO - Project update with status code: {}'.format(r.status_code))\n    print('INFO - task: {}, state: {}'.format(task_uuid, task_state))\nelse:\n    print('ERRPR - project update failed, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n# for for the project task to complete\nwhile task_state == 'PENDING':\n    print('INFO - waiting for 1 sec')\n    sleep(1)\n    r = requests.get(url.format('tasks\/'+task_uuid), **kwargs)\n    task_state = r.json()['status']\n    print('INFO - task: {}, state: {}'.format(task_uuid, task_state))\n\n\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"04_clone_template_environment","attrs":{"script":"# Name: Clone project enivronment from a reference project template\n# Task Type: Excute\n# Script Type: EScript\n# Author: Husain Ebrahim <husain.ebrahim@nutanix.com>\n# Date: 25-09-2021\n# Description:\n\nimport requests\n\n# -------------- General settings ------------------\n\n\n\n# -------------- Test Environment ------------------\n\n# -------------- Calm Environment ------------------\nauthorization = 'Bearer @@{calm_jwt}@@'\nurl = 'https:\/\/127.0.0.1:9440\/api\/nutanix\/v3\/{}'\nproject_template = '@@{PROJECT_TEMPLATE}@@'\nproject_uuid = '@@{PROJECT_UUID}@@'\n\nkwargs = {\n    'verify': False,\n    'headers': {'Authorization': authorization}\n}\n\n\n# find the template project to clone the specs\n# ----------------------------------------------\npayload = {\n    'kind': 'project',\n    'filter': 'name=={}'.format(project_template)\n}\n\nr = requests.post(url.format('projects\/list'), json=payload, **kwargs)\nif r.status_code == 200 and int(r.json()['metadata']['total_matches']):\n    print('INFO - Template project found')\n    template = r.json()['entities'][0]\n    template_uuid = template['metadata']['uuid']\n    account_reference_list = template['spec']['resources']['account_reference_list']\n    default_subnet_reference = template['spec']['resources']['default_subnet_reference']\n    subnet_reference_list = template['spec']['resources']['subnet_reference_list']\n    environment_reference_list = template['spec']['resources']['environment_reference_list']\n    default_environment_uuid = template['spec']['resources']['default_environment_reference'].get('uuid')\n\n    print('INFO - template project uuid: {}'.format(template_uuid))\nelse:\n    print('ERROR - No template project found, stopping, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n# get target project details\n# -----------------------------------------\nprint('INFO - updating target project: {}'.format(project_uuid))\nr = requests.get(url.format('projects\/'+project_uuid), **kwargs)\nproject_spec = r.json()\ndel(project_spec['status'])\n\n# create new environments based on the template\ntarget_environment_list = []\ntarget_default_environment = None\nfor environment in environment_reference_list:\n    print('INFO - creating new environment')\n    r = requests.get(url.format('environments\/'+environment['uuid']), **kwargs)\n    env_spec = r.json()\n    template_env_uuid = env_spec['metadata']['uuid']\n    del(env_spec['status'])\n    new_substrate_list = []\n    for substrate in env_spec['spec']['resources']['substrate_definition_list']:\n        substrate['uuid'] = str(uuid.uuid4())\n        new_substrate_list.append(substrate)\n    \n    env_spec['spec']['resources']['substrate_definition_list'] = new_substrate_list\n    env_spec['metadata'] = {'kind': 'environment', 'name': env_spec['spec']['name'],'project_reference' : {'kind': 'project', 'uuid': project_uuid}}\n    env_spec['spec']['resources']['credential_definition_list'] = [{\n        'name': 'default',\n        'type': 'PASSWORD',\n        'username': 'admin',\n        'secret': {'attrs': {'is_secret_modified': True}, 'value': str(uuid.uuid4())},\n        'uuid': str(uuid.uuid4())\n    }]\n    \n    r = requests.post(url.format('environments'), json=env_spec, **kwargs)\n    if r.status_code == 200:\n        new_env_uuid = r.json()['metadata']['uuid']\n        print('INFO - new environment created with uuid: {}'.format(new_env_uuid))\n        target_environment_list.append({'kind': 'environment', 'uuid':new_env_uuid})\n        if template_env_uuid == default_environment_uuid:\n            target_default_environment = {'kind': 'environment', 'uuid': new_env_uuid}\n\n\n# append the project spec with new environment list\nif len(target_environment_list):\n    project_spec['spec']['resources']['environment_reference_list'] = target_environment_list\nif target_default_environment:\n    project_spec['spec']['resources']['default_environment_reference'] = target_default_environment\n\nsleep(3)\nr = requests.put(url.format('projects\/'+project_uuid), json=project_spec, **kwargs)\n\n\n# check if the update worked\nif r.status_code == 202:\n    result = r.json()\n    task_uuid = result['status']['execution_context']['task_uuid']\n    task_state = result['status']['state']\n    project_uuid = result['metadata']['uuid']\n    print('INFO - Project update with status code: {}'.format(r.status_code))\n    print('INFO - task: {}, state: {}'.format(task_uuid, task_state))\nelse:\n    print('ERRPR - project update failed, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n# for for the project task to complete\nwhile task_state == 'PENDING':\n    print('INFO - waiting for 1 sec')\n    sleep(1)\n    r = requests.get(url.format('tasks\/'+task_uuid), **kwargs)\n    task_state = r.json()['status']\n    print('INFO - task: {}, state: {}'.format(task_uuid, task_state))\n\n\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"05_clone_template_quotas","attrs":{"script":"# Name: Clone quotas from template project\n# Task Type: Excute\n# Script Type: EScript\n# Author: Husain Ebrahim <husain.ebrahim@nutanix.com>\n# Date: 01-11-2021\n# Description:\n\nimport requests\n\n# -------------- General settings ------------------\n\n\n\n# -------------- Test Environment ------------------\n\n# -------------- Calm Environment ------------------\nauthorization = 'Bearer @@{calm_jwt}@@'\nurl = 'https:\/\/127.0.0.1:9440\/api\/{}'\nproject_template = '@@{PROJECT_TEMPLATE}@@'\nproject_uuid = '@@{PROJECT_UUID}@@'\n\nkwargs = {\n    'verify': False,\n    'headers': {'Authorization': authorization}\n}\n\n\n# find the template project to clone the specs\n# ----------------------------------------------\npayload = {\n    'kind': 'project',\n    'filter': 'name=={}'.format(project_template)\n}\n\nr = requests.post(url.format('nutanix\/v3\/projects\/list'), json=payload, **kwargs)\nif r.status_code == 200 and int(r.json()['metadata']['total_matches']):\n    print('INFO - Template project found')\n    template = r.json()['entities'][0]\n    template_uuid = template['metadata']['uuid']\n    print('INFO - template project uuid: {}'.format(template_uuid))\nelse:\n    print('ERROR - No template project found, stopping, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n\n# get quota of the template project\n# ----------------------------------------------\npayload = {\n    'filter': 'project=={}'.format(template_uuid)\n}\n\nr = requests.post(url.format('calm\/v3.0\/quotas\/list'), json=payload, **kwargs)\nif r.status_code == 200 and len(r.json()['entities']) == 0:\n    print('INFO - template project has no quotas, stopping')\n    exit(0)\nelif r.status_code != 200:\n    print('ERROR - API call failed, staus_code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\nquota_spec = r.json()['entities'][0]['status']\n\n# update new project with template quota\n# ----------------------------------------------\nquota_uuid = str(uuid.uuid4())\nquota_spec['resources']['uuid'] = quota_uuid\nquota_spec['resources']['entities']['project'] = project_uuid\npayload = {\n    'spec': quota_spec,\n    'metadata': {\n        'kind': 'quota',\n        'project_reference': {'kind': 'project', 'uuid': project_uuid},\n        'uuid': quota_uuid\n    } }\nr = requests.post(url.format('calm\/v3.0\/quotas'), json=payload, **kwargs)\nif r.status_code == 200:\n    print('INFO - quota created sucessfully, enabling quota')\n    print('INFO - waiting before state update')\n    sleep(3)\n    payload = {\n        'spec': {\n            'resources': {\n                'entities': {'project': project_uuid},\n                'state': quota_spec['resources']['state']\n                }\n            }\n        }\n    r = requests.put(url.format('calm\/v3.0\/quotas\/update\/state'), json=payload, **kwargs)\nelse:\n    print('ERROR - Quota set failed, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"06_publish_marketplace_items","attrs":{"script":"# Name: Publish marketplace items based on TEMPLATE project published items\n# Task Type: Excute\n# Script Type: EScript\n# Author: Husain Ebrahim <husain.ebrahim@nutanix.com>\n# Date: 25-09-2021\n# Description:\n\nimport requests\n\n# -------------- General settings ------------------\n\n\n\n# -------------- Test Environment ------------------\n\n# -------------- Calm Environment ------------------\nauthorization = 'Bearer @@{calm_jwt}@@'\nurl = 'https:\/\/127.0.0.1:9440\/api\/nutanix\/v3\/{}'\nproject_template = '@@{PROJECT_TEMPLATE}@@'\nproject_uuid = '@@{PROJECT_UUID}@@'\n\nkwargs = {\n    'verify': False,\n    'headers': {'Authorization': authorization}\n}\n\n\n# find the template project to clone the specs\n# ----------------------------------------------\npayload = {\n    'kind': 'project',\n    'filter': 'name=={}'.format(project_template)\n}\n\nr = requests.post(url.format('projects\/list'), json=payload, **kwargs)\nif r.status_code == 200 and int(r.json()['metadata']['total_matches']):\n    print('INFO - Template project found')\n    template = r.json()['entities'][0]\n    template_uuid = template['metadata']['uuid']\n    print('INFO - Template project uuid: {}'.format(template_uuid))\nelse:\n    print('ERROR - No template project found, stopping, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n# get all published items in marketplace\npayload = {\n    'kind': 'marketplace_item',\n    'filter': 'app_state==PUBLISHED'\n}\n\nr = requests.post(url.format('calm_marketplace_items\/list'), json=payload, **kwargs)\nfor item in r.json()['entities']:\n    r = requests.get(url.format('calm_marketplace_items\/'+item['metadata']['uuid']), **kwargs)\n    item_details = r.json()\n    for project in item_details['spec']['resources']['project_reference_list']:\n        if project['uuid'] == template_uuid:\n            print('INFO - Publishing item: {}'.format(item['metadata']['uuid']))\n            del(item_details['status'])\n            item_details['spec']['resources']['project_reference_list'].append({\n                'kind': 'project',\n                'uuid': project_uuid\n            })\n            r = requests.put(url.format('calm_marketplace_items\/'+item['metadata']['uuid']), json=item_details, **kwargs)\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_endpoint","name":"elm-ad"},"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"07_create_ad_objects","attrs":{"script":"$code = \"@@{PROJECT_CODE}@@\"\n$ou_base = \"@@{PROJECT_OU_BASE}@@\"\n$project_name = \"@@{PROJECT_NAME}@@\"\n\n\nwrite-Host \"Create new project group\"\nWrite-Host \"`n====================================================\"\nNew-ADGroup `\n   -Name \"$code-users\" `\n   -SamAccountName \"$code-users\" `\n   -GroupCategory Security `\n   -GroupScope Global `\n   -Path \"$ou_base\" `\n   -Description \"$project_name users\" `\n   -PassThru\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"npsscript"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"08_create_project_role","attrs":{"script":"# Name: Add the AD user as admin role to the new project\n# Task Type: Execute\n# Script Type: EScript\n# Author: Husain Ebrahim <husain.ebrahim@nutanix.com>\n# Date: 21-11-2021\n# Description:\n\nimport requests\n\n# -------------- General settings ------------------\n\n\n# -------------- Test Environment ------------------\n# region test-environment\n# -----------------------------------------------\n# from decouple import config\n# import requests\n# import urllib3\n# import json\n# import base64\n# from time import sleep\n# import uuid\n# \n# urllib3.disable_warnings()\n# \n# # prism central config\n# pc_host = config('PC_HOST')\n# pc_port = config('PC_PORT', '9440')\n# pc_username = config('PC_USERNAME')\n# pc_password = config('PC_PASSWORD')\n# pc_authorization = 'Basic ' + base64.b64encode('{}:{}'.format(pc_username, pc_password).encode()).decode()\n# \n# # test settings\n# project_template = 'TEMPLATE'\n# project_uuid = '464f93ec-b976-4dc1-b5c0-f15a916899ee'\n# project_code = 'TTT'\n# ou_base = 'ou=projects,dc=elm,dc=poc'\n# domain = 'elm.poc'\n# role_name = 'Project Admin'\n# endregion\n\n# region calm-environment\n# -----------------------------------------------\nimport requests\n\n# prism central config\npc_host = '127.0.0.1'\npc_port = '9440'\npc_authorization = 'Bearer @@{calm_jwt}@@'\n\n# blueprint settings\nproject_template = '@@{PROJECT_TEMPLATE}@@'\nproject_uuid = '@@{PROJECT_UUID}@@'\nproject_code = '@@{PROJECT_CODE}@@'\nou_base = '@@{PROJECT_OU_BASE}@@'\ndomain = '@@{DOMAIN_NAME}@@'\nrole_name = '@@{ROLE_NAME}@@'\n# endregion\n\n# region http headers\n# -----------------------------------------------\npc_url = 'https:\/\/{}:{}\/api\/nutanix\/v3\/{}'.format(pc_host, pc_port, '{}')\npc_kwargs = {\n    'verify': False,\n    'headers': {'Authorization': pc_authorization}\n}\n# endregion\n\n# find the template project to clone the specs\n# ----------------------------------------------\npayload = {\n    'kind': 'project',\n    'filter': 'name=={}'.format(project_template)\n}\n\nr = requests.post(pc_url.format('projects\/list'), json=payload, **pc_kwargs)\nif r.status_code == 200 and int(r.json()['metadata']['total_matches']):\n    print('INFO - Template project found')\n    template = r.json()['entities'][0]\n    template_uuid = template['metadata']['uuid']\n    print('INFO - Template project uuid: {}'.format(template_uuid))\nelse:\n    print('ERROR - No template project found, stopping, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n# find directory service uuid on prism\n# ----------------------------------------------\npayload = {\n    'kind': 'directory_service'\n}\ndirectory_uuid = ''\n\nr = requests.post(pc_url.format('directory_services\/list'), json=payload, **pc_kwargs)\nif r.status_code == 200:\n    for directory in r.json()['entities']:\n        if directory['spec']['resources']['domain_name'] == domain:\n            directory_uuid = directory['metadata']['uuid']\n\n    if directory_uuid:\n        print('INFO - Direcotry found with uuid: {}'.format(directory_uuid))\n    else:\n        print('ERROR - no directory uuid found for domain: {}'.format(domain))\n        exit(1)\nelse:\n    print('ERROR - No directory service found, stopping, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n# find Prism roles uuid and names\n# ----------------------------------------------\npayload = {'kind': 'role', 'filter': '', 'length': 1000}\nr = requests.post(pc_url.format('roles\/list'), json=payload, **pc_kwargs)\nprism_roles = {}\nif r.status_code == 200:\n    for role in r.json().get('entities', []):\n        prism_roles[role['metadata']['uuid']] = role['spec']['name']\nelse:\n    print('ERROR - failed to get roles, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n\n# get the group uuid\n# ----------------------------------------------\ngroup_uuid = str(uuid.uuid4())\n# user_group = 'cn={},{}'.format(project_code + '-users', ou_base)\n# payload = {\n#     'entity_type': 'user_group',\n#     'group_sort_attribute': 'group_name',\n#     'group_member_attributes': [\n#         {'attribute': 'group_name'},\n#         {'attribute': 'directory_domain'},\n#         {'attribute': 'distinguished_name'}\n#     ],\n#     'query_name': 'prism:GroupsRequestModel',\n#     'filter_criteria': 'distinguished_name=in={}'.format(user_group.replace(',', '%2C').replace('=', '%3D')).lower(),\n# }\n#\n# r = requests.post(pc_url.format('groups'), json=payload, **pc_kwargs)\n# if r.status_code == 200:\n#     group_uuid = r.json()['group_results'][0]['entity_results'][0]['entity_id']\n#     print('INFO - group uuid: {}'.format(group_uuid))\n# else:\n#     print('ERROR - failed to get group uuid, status code: {}, msg: {}'.format(r.status_code, r.content))\n#     exit(1)\n\n# get the template project details\n# ----------------------------------------------\nr = requests.get(pc_url.format('projects_internal\/' + template_uuid), **pc_kwargs)\nif r.status_code == 200:\n    print('INFO - obtain template details')\n    template = r.json()\n\n# get the new project details\nr = requests.get(pc_url.format('projects_internal\/' + project_uuid), **pc_kwargs)\nif r.status_code == 200:\n    print('INFO - obtain new project details')\n    project = r.json()\n\n# prepare the project details to update with roles\n# ----------------------------------------------\ndel (project['status'])\ntemplate_roles = template['spec']['access_control_policy_list']\nroles = []\n\nfor role in template_roles:\n    reference_role = role['acp']['resources']['role_reference']['uuid']\n    if prism_roles.get(reference_role) == role_name:\n        filter = json.dumps(role['acp']['resources']['filter_list']).replace(template_uuid, project_uuid)\n        filter = json.loads(filter)\n        roles.append({\n            'uuid': group_uuid,\n            'name': 'cn={}-users,{}'.format(project_code.lower(), ou_base.lower()),\n            'reference_role': reference_role,\n            'filter': filter\n        })\n\n# update the new project with clone roles\n# ----------------------------------------------\nacp_list = []\ngroups_list = []\nfor role in roles:\n    # acp_list payload\n    acp_list.append({\n        'acp': {\n            'name': 'nuCalmAcp-{}'.format(str(uuid.uuid4())),\n            'resources': {\n                'role_reference': {'uuid': role['reference_role'], 'kind': 'role'},\n                'user_group_reference_list': [{\n                    'name': role['name'],\n                    'kind': 'user_group',\n                    'uuid': role['uuid']\n                }],\n                'filter_list': role['filter']\n            }\n        },\n        'metadata': {'kind': 'access_control_policy'},\n        'operation': 'ADD'\n    })\n\n    groups_list.append(\n        {\n            'name': role['name'],\n            'kind': 'user_group',\n            'uuid': role['uuid']\n        }\n    )\n\nproject['spec']['access_control_policy_list'] = acp_list\nproject['spec']['project_detail']['resources']['external_user_group_reference_list'] = groups_list\nproject['spec']['user_group_list'] = [{\n    'metadata': {'kind': 'user_group', 'uuid': group_uuid},\n    'operation': 'ADD',\n    'user_group': {'resources': \n                       {'directory_service_user_group':\n                                     {'distinguished_name': 'CN={}-users,{}'.format(project_code, ou_base)}\n                        }\n                   }\n}]\n\nr = requests.put(pc_url.format('projects_internal\/' + project_uuid), json=project, **pc_kwargs)\n\nif r.status_code == 202:\n    print('INFO - new project updated with roles')\nelse:\n    print('ERROR - project role update, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"09_create_flow_policy","attrs":{"script":"# Name: Create flow policy based on project and app name\n# Task type: SetVariable\n# Script type: Escript\n# Author: Husain Ebrahim\n# Date: 08-03-2022\n# Description:\n\n# Shared between test and calm environments\n# --------------------------------------------------\nimport requests\ncategory_name = 'AppType'\napp_type = 'Default'\nprojects_category = 'PROJECTS'\n\n# -------------- Test Environment ------------------\n# import json\n# from time import sleep\n# import uuid\n# import urllib3\n# import re\n# import json\n# from base64 import b64encode\n# from decouple import config\n# urllib3.disable_warnings()\n# \n# PRISM_HOST = config('PC_HOST')\n# PRISM_PORT = config('PC_PORT', '9440')\n# PRISM_USER = config('PC_USERNAME')\n# PRISM_PASS = config('PC_PASSWORD')\n# authorization = 'Basic {}'.format(b64encode(f'{PRISM_USER}:{PRISM_PASS}'.encode()).decode())\n# url = 'https:\/\/{}:{}\/api\/nutanix\/v3\/'.format(PRISM_HOST, PRISM_PORT)\n# project_code = 'TTT'\n# description = 'Name of the project'\n# default_policy = json.loads('''[\n#   {\"ip\": \"0.0.0.0\", \"prefix\": 0, \"protocol\": \"TCP\", \"port\": 22},\n#   {\"ip\": \"0.0.0.0\", \"prefix\": 0, \"protocol\": \"TCP\", \"port\": 9090}\n# ]''')\n# id_based_policy = json.loads('''[{\"ip\": \"0.0.0.0\", \"prefix\": 0, \"protocol\": \"TCP\", \"port\": 5985}''')\n\n# -------------- Calm Environment ------------------\nauthorization = 'Bearer @@{calm_jwt}@@'\nurl = 'https:\/\/127.0.0.1:9440\/api\/nutanix\/v3\/'\nproject_code = '@@{PROJECT_CODE}@@'\ndescription = 'Flow policy for @@{PROJECT_CODE}@@ - @@{PROJECT_NAME}@@'\ndefault_policy = json.loads('''@@{DEFAULT_POLICY}@@''')\nid_based_policy = json.loads('''@@{ID_BASED_POLICY}@@''')\n\nkwargs = {\n    'verify': False,\n    'headers': {'Authorization': authorization}\n}\n\n\n# --------------- functions ------------------------\n# --------------------------------------------------\ndef generate_ace(ace):\n    ip = ace.get('ip')\n    prefix = int(ace.get('prefix', 0))\n    proto = ace.get('protocol')\n    port = int(ace.get('port', 0))\n    entry = {\n        'peer_specification_type': 'IP_SUBNET',\n        'ip_subnet': {\n            'ip': ip,\n            'prefix_length': prefix\n        },\n        'protocol': proto,\n    }\n    if proto == 'TCP':\n        entry['tcp_port_range_list'] = [{'start_port': port, 'end_port': port}]\n    elif proto == 'UDP':\n        entry['udp_port_range_list'] = [{'start_port': port, 'end_port': port}]\n\n    return entry\n\n# ----------------- end of functions ---------------------\n# --------------------------------------------------------\n\n# create policy\n# ---------------------------------------------\npolicy_name = '{}-policy'.format(project_code)\ntarget_group = {\n    'peer_specification_type': 'FILTER',\n    'filter': {\n      'type': 'CATEGORIES_MATCH_ALL',\n      'kind_list': ['vm'],\n      'params': {category_name: [app_type], projects_category: [project_code]}\n    }\n  }\nresources = {\n    'allow_ipv6_traffic': False,\n    'is_policy_hitlog_enabled': False,\n    'app_rule': {\n      'target_group': target_group,\n      'inbound_allow_list': [],\n      'outbound_allow_list': [{'peer_specification_type': 'ALL'}],\n      'action': 'APPLY'\n    }\n  }\nacl = []\nfor ace in default_policy:\n    acl.append(generate_ace(ace))\n\nfor ace in id_based_policy:\n    acl.append(generate_ace(ace))\n\nresources['app_rule']['inbound_allow_list'] = acl\npayload = {\n    'api_version': '3.1.0',\n    'metadata': {'kind': 'network_security_rule'},\n    'spec': {\n      'name': policy_name,\n      'description': description,\n      'resources': resources\n    }\n  }\n\nr = requests.post((url+'network_security_rules'), json=payload, **kwargs)\nif r.status_code == 202:\n    print('INFO - flow policy created')\n    print('POLICY_UUID={}'.format(r.json()['metadata']['uuid']))\n    print('CURRENT_POLICY={}'.format(json.dumps(default_policy)))\nelse:\n    print('ERROR - policy creation failed, status code: {}, msg: {}'.format(r.status_code,r.content))\n    exit(1)\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"10_push_policy_to_panorama","attrs":{"script":"# Shared between test and calm environments\n# --------------------------------------------------\nimport requests\n\n\n# credentials and settings\n# --------------------------------------------------\n\nparonama = '@@{PANORAMA_HOST}@@'\nusername = '@@{panorama_cred.username}@@'\npassword = '@@{panorama_cred.secret}@@'\ncluster_name = '@@{CLUSTER_NAME}@@'\nproject_category = '@@{PROJECT_CATEGORY}@@'\nproject_code = '@@{PROJECT_CODE}@@'\ndevice_group = '@@{DEVICE_GROUP}@@'\nzone_name = '@@{ZONE_NAME}@@'\napplications_default = '@@{PAN_POLICY}@@'\napplications_user = '@@{PAN_USER_POLICY}@@'\nou_base = '@@{PROJECT_OU_BASE}@@'\n\n# --------------------------------------------------\n\n\n# get auth key\n# --------------------------------------------------\nurl = 'https:\/\/{}\/api\/?type=keygen&user={}&password={}'.format(paronama, username, password)\nr = requests.get(url, verify=False)\nif r.status_code != 200:\n    print('ERROR - getting VM details failed, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\nauth_key = r.text.split('<key>')[1].split('<\/key>')[0]\nprint('INFO - authenticated successfully')\n\n# create address group for the project\n# --------------------------------------------------\ngroup_name = 'Project-{}'.format(project_code)\naddress_group = {'entry': [\n            {\n                '@name': group_name,\n                '@location': 'device-group',\n                '@device-group': device_group,\n                '@loc': device_group,\n                'dynamic': {\n                    'filter': \"'ntnx.PC-prism-central.{}.{}.{}'\".format(cluster_name, project_category, project_code),\n                }\n            }]}\nurl ='https:\/\/{}\/restapi\/v10.2\/Objects\/AddressGroups?location=device-group&device-group={}&name={}'\\\n    .format(paronama, device_group, group_name)\nr = requests.post(url, json=address_group, verify=False, headers={'X-PAN-KEY': auth_key})\nif r.status_code != 200:\n    print('ERROR - creating address group failed, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\nprint('INFO - address group created successfully')\n\n\n# policy entry template\n# --------------------------------------------------\nentry = {\n    '@name': '',\n    '@location': 'device-group',\n    '@device-group': device_group,\n    'target': {'negate': 'no'},\n    'to': {'member': [zone_name]},\n    'from': {'member': [zone_name]},\n    'source': {'member': ['any']},\n    'destination': {'member': ['any']},\n    'source-user': {'member': ['any']},\n    'category': {'member': ['any']},\n    'application': {'member': ['']},\n    'service': {'member': ['application-default']},\n    'source-hip': {'member': ['any']},\n    'destination-hip': {'member': ['any']},\n    'action': 'allow'\n}\n\n# default allow entry\n# --------------------------------------------------\nentry_name = '{}-external-default'.format(project_code)\nurl = 'https:\/\/{}\/restapi\/v10.2\/Policies\/SecurityPreRules?location=device-group&device-group={}&name={}'\\\n    .format(paronama, device_group, entry_name)\n\nentry['@name'] = entry_name\nentry['source']['member'] = ['any']\nentry['destination']['member'] = [group_name]\nentry['application']['member'] = applications_default.split(',')\n\nr = requests.post(url, json={'entry': [entry]}, verify=False, headers={'X-PAN-KEY': auth_key})\nif r.status_code == 200:\n    print('INFO - default external allow entry created successfully')\nelse:\n    print('ERROR - creating default external allow entry failed, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n# default intra entry\n# --------------------------------------------------\nentry_name = '{}-intra-default'.format(project_code)\nurl = 'https:\/\/{}\/restapi\/v10.2\/Policies\/SecurityPreRules?location=device-group&device-group={}&name={}'\\\n    .format(paronama, device_group, entry_name)\n\nentry['@name'] = entry_name\nentry['source']['member'] = [group_name]\nentry['destination']['member'] = [group_name]\nentry['application']['member'] = ['any']\n\nr = requests.post(url, json={'entry': [entry]}, verify=False, headers={'X-PAN-KEY': auth_key})\nif r.status_code == 200:\n    print('INFO - default intra project allow entry created successfully')\nelse:\n    print('ERROR - creating default intra project allow entry failed, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n\n\n# user based entry\n# --------------------------------------------------\nentry_name = '{}-user-default'.format(project_code)\nurl = 'https:\/\/{}\/restapi\/v10.2\/Policies\/SecurityPreRules?location=device-group&device-group={}&name={}'\\\n    .format(paronama, device_group, entry_name)\n\nentry['@name'] = entry_name\nentry['source']['member'] = ['any']\nentry['destination']['member'] = [group_name]\nentry['source-user']['member'] = ['cn={}-users,{}'.format(project_code, ou_base)]\nentry['application']['member'] = applications_user.split(',')\n\nr = requests.post(url, json={'entry': [entry]}, verify=False, headers={'X-PAN-KEY': auth_key})\nif r.status_code == 200:\n    print('INFO - default user based allow entry created successfully')\nelse:\n    print('ERROR - creating default user based allow entry failed, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n# commit changes\n# --------------------------------------------------\nurl = 'https:\/\/{}\/api\/?key={}&type=commit&action=all&cmd=<commit-all><shared-policy><device-group><entry name=\"{}\"\/><\/device-group><\/shared-policy><\/commit-all>'.format(paronama, auth_key, device_group)\n\nr = requests.get(url, verify=False)\nif r.status_code == 200:\n    print('INFO - changes committed successfully')\nelse:\n    print('ERROR - committing changes failed, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"d7f6bd29_runbook","main_task_local_reference":{"kind":"app_task","name":"aba4a069_dag"},"variable_list":[{"regex":{"should_validate":false,"value":"^(.|\\n)*$"},"val_type":"MULTILINE_STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"ID_BASED_POLICY","value":"[\n{\"ip\": \"0.0.0.0\", \"prefix\": 0, \"protocol\": \"TCP\", \"port\": 22}\n]","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"ZONE_NAME","value":"NTNX-Flow-Zone","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"DEVICE_GROUP","value":"NTNX-FlowGroup","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"CLUSTER_NAME","value":"CL-ELM-1","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PANORAMA_HOST","value":"10.54.60.50","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"3 letters for project code","data_type":"BASE","type":"LOCAL","name":"PROJECT_CODE","value":"CCC","label":"Project Code","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":true,"value":"^[a-zA-Z0-9](?:[a-zA-Z0-9 ]{3,25}[a-zA-Z0-9])?$"},"val_type":"STRING","is_mandatory":true,"description":"Select a project name for the tenant project (max 25 alpa numeric chars)","data_type":"BASE","type":"LOCAL","name":"PROJECT_NAME","value":"Project C","label":"Project Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^(.|\\n)*$"},"val_type":"MULTILINE_STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"DEFAULT_POLICY","value":"[\n{\"ip\": \"0.0.0.0\", \"prefix\": 0, \"protocol\": \"ICMP\", \"port\": 0},\n{\"ip\": \"0.0.0.0\", \"prefix\": 0, \"protocol\": \"TCP\", \"port\": 80},\n{\"ip\": \"10.54.60.39\", \"prefix\": 32, \"protocol\": \"TCP\", \"port\": 22},\n{\"ip\": \"10.54.60.39\", \"prefix\": 32, \"protocol\": \"TCP\", \"port\": 5985}\n]","label":"Default Flow Policy","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"LIST","type":"LOCAL","name":"PAN_POLICY","value":"ping","label":"PAN Default Policy","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["ping","httport","ssh","ms-rdp"]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"LIST","type":"LOCAL","name":"PAN_USER_POLICY","value":"ssh,ms-rdp","label":"PAN User-based Policy","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["ping","httport","ssh","ms-rdp"]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PROJECT_CATEGORY","value":"PROJECTS","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PROJECT_TEMPLATE","value":"TEMPLATE","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"DOMAIN_NAME","value":"elm.poc","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PROJECT_OU_BASE","value":"OU=PROJECTS,DC=elm,DC=poc","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"DASHBOARD_URL","value":"http:\/\/10.38.16.15\/","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"ROLE_NAME","value":"Project Admin","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}}]}},"name":"Create New Project - Security"},"api_version":"3.0","metadata":{"last_update_time":"1683902028185128","kind":"runbook","spec_version":12,"creation_time":"1683699588198382","name":"Create New Project - Security"}}